doc = 
	"/*@"
	"@category" $(_text=category)
	[ "@require" $(_text=require) ]
	{ $(_topic) }
	"@*/"
	;

topic =
	"@class" $(class) |
	"@interface" $(interface) |
	"@fngroup" $(fngroup) |
	"@fn" $(fn) |
	"@type" $(class) |
	"@<prj" $(prj) "@>" |
	"@topic"
	("[class]" $(class) |
	"[interface]" $(interface) |
	"[fngroup]" $(fngroup) |
	"[fn]" $(fn));
	
interface =
	$(_class);
	
class =
	$(topic_args=title) $(_topic_begin) [ $(class_info) ] $(_topic_end) $(_class_sub_topic);

fngroup =
	$(_text=title) $(_topic_begin) $(_topic_end) [ $(fns) ];
	
fn =
	$(topic_args=title) $(_topic_begin) [ $(fn_info) ] $(_topic_end);
	
prj =
	"[" $(*=prj_name) "]"
	$(_text=title) $(_topic_begin) $(_topic_end) $(_prj_sub_topic);
	
topic_begin =
	[ "@brief" $(_text=brief) ];
	
class_info =
	{ "@decl" $(class_decl) } *{ "@arg" $(arg) };

topic_end =
	[ "@remark" $(_text=remark) ]
	*{ "@example" $(_text=example) }
	[ $(sees) ]
	;

sees =
	{ "@see" $(_see) };
	
see =
	"[example]" $(_text=see_example) |
	"[concept]" $(_text=see_concept) |
	$(see_topic);

see_topic =
	$(_topic_args);

class_sub_topic =
	[ $(ctors) ]
	[ $(methods) ]
	[ $(apis) ]
	;

prj_sub_topic =
	*{ "@<prj" $(prj) "@>" | "@file" $(file) };
	
file =
	[ "[" $(*=attr) "]" ] $(_csymbol=path) [ "." $(_csymbol=ext) ] $(_blank) [ $(_eol=title) ];

ctors =	
	{ ("@constructor"|"@ctor") $(ctor) };

methods =
	{ "@fn" $(fn) };
	
apis =
	{ "@api" $(fn) };

fns =
	{ "@fn" $(fn) };
	
fn_info =
	{ "@decl" $(fn_decl) } *{ "@arg" $(arg) } [ "@return" $(_text=return_value) ];

topic_args =
	*{ $(_cppsymbol=topic_arg) "," } $(_cppsymbol=topic_arg);
	
class_decl =
	[ $(template) ]
	("class" | "interface") $(_cppsymbol=class_name) [ ":" { $(base_classes) } ] ";" ;
	
arg =
	[ "[" $(*=attr) "]" ]
	$(_csymbol=name)
	[ "//" [ $(_blank) ] $(_eol=brief) ]
	$(_text=remark);
	
ctor =
	$(_topic_begin) [ $(ctor_info) ] $(_topic_end);
	
base_classes =
	{ $(_base_class) "," } | $(_base_class);
	
base_class =
	[ "public" ] $(_cppsymbol=base_class_name);

ctor_info =
	{ "@decl" $(ctor_decl) } *{ "@arg" $(arg) };
	
fn_decl =
	[ $(template) ]
	[ $(_fn_attr_text=fn_attr) ]
	[ $(_return_type_imp=return_type) ]
	$(_fn_name_imp=fn_name)
	"("
	$(_fn_arglist)
	")"
	[ "const" ]
	[ $(_pure_text=pure) ]
	";" ;
	
ctor_decl =
	[ $(template) ]
	$(_cppsymbol=fn_name)
	"("
	$(_fn_arglist)
	")" ";"
	;

template =
	"template" "<" $(_template_arglist) ">";
	
template_arglist =
	*{ $(template_arg) "," } $(template_arg);
	
template_arg =
	$(_tempate_arg_type_imp=type)
	$(_csymbol=name)
	[ "=" $(_cppsymbol=default_value) ]
	;
	
tempate_arg_type_imp =
	"class" | "typename" | $(_ctype);
	
fn_attr_text =
	"static";
	
return_type_imp =
	"STDPROC_(" $(*) ")" | "STDPROC" |
	"STDMETHODIMP_(" $(*) ")" | "STDMETHODIMP" |
	"STDAPI_(" $(*) ")" | "STDAPI" |
	$(_ctype) [ "__stdcall" ];
	
fn_name_imp =
	"operator" $(*) *[ "(" ] | $(_cppsymbol);
	
fn_arglist =
	*{ $(fn_arg) "," } [ $(fn_arg) ];
	
fn_arg =
	[ $(_fn_arg_attr_text=attr) $(_blank) ]
	$(_ctype=type)
	$(_csymbol=name)
	[ $(_array_imp=array) ]
	[ "=" $(_default_value_imp=default_value) ]
	;
	
default_value_imp=
	$(_csymbol) | $(_cint) | $(_cstring);
	
ctype =
	[ "const" $(_blank) ]
	$(_cppsymbol)
	*{ "*" }
	[ "&" ]
	;
	
array_imp =
	{ "[" $(*) "]" };
	
fn_arg_attr_text =
	"IN" "OUT" | "IN" | "OUT";
	
pure_text =
	"PURE" | "=" "0";
	
cppsymbol =
	*{ $(_cppsymbol2) "::" } $(_cppsymbol2);
	
cppsymbol2 =
	$(_csymbol) [ "<" $(_cppsymbol2_args) ">" ];
	
cppsymbol2_args =
	*{ $(_ctype) "," } $(_ctype);
	
_text =
	$(*) *[ "@" ];
